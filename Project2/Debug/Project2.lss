
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019c  00800100  00000e96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  0080029c  0080029c  000010c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a79  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d9  00000000  00000000  00001c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bf  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a8  00000000  00000000  00002f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000032d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_10>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_13>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_16>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_20>
  54:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_21>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  68:	ee 01       	movw	r28, r28
  6a:	a5 02       	muls	r26, r21
  6c:	c1 01       	movw	r24, r2
  6e:	a5 02       	muls	r26, r21
  70:	dc 01       	movw	r26, r24
  72:	a5 02       	muls	r26, r21
  74:	a5 02       	muls	r26, r21
  76:	a3 01       	movw	r20, r6
  78:	a5 02       	muls	r26, r21
  7a:	a5 02       	muls	r26, r21
  7c:	a5 02       	muls	r26, r21
  7e:	85 01       	movw	r16, r10
  80:	2f 02       	muls	r18, r31
  82:	41 02       	muls	r20, r17
  84:	a5 02       	muls	r26, r21
  86:	77 02       	muls	r23, r23
  88:	a5 02       	muls	r26, r21
  8a:	a5 02       	muls	r26, r21
  8c:	8d 02       	muls	r24, r29
  8e:	67 01       	movw	r12, r14
  90:	65 02       	muls	r22, r21
  92:	05 02       	muls	r16, r21
  94:	53 02       	muls	r21, r19
  96:	a5 02       	muls	r26, r21
  98:	a5 02       	muls	r26, r21
  9a:	a5 02       	muls	r26, r21
  9c:	a5 02       	muls	r26, r21
  9e:	a5 02       	muls	r26, r21
  a0:	a5 02       	muls	r26, r21
  a2:	a5 02       	muls	r26, r21
  a4:	a5 02       	muls	r26, r21
  a6:	a5 02       	muls	r26, r21
  a8:	ee 01       	movw	r28, r28
  aa:	a5 02       	muls	r26, r21
  ac:	c1 01       	movw	r24, r2
  ae:	a5 02       	muls	r26, r21
  b0:	dc 01       	movw	r26, r24
  b2:	a5 02       	muls	r26, r21
  b4:	a5 02       	muls	r26, r21
  b6:	a3 01       	movw	r20, r6
  b8:	a5 02       	muls	r26, r21
  ba:	a5 02       	muls	r26, r21
  bc:	a5 02       	muls	r26, r21
  be:	85 01       	movw	r16, r10
  c0:	2f 02       	muls	r18, r31
  c2:	41 02       	muls	r20, r17
  c4:	a5 02       	muls	r26, r21
  c6:	77 02       	muls	r23, r23
  c8:	a5 02       	muls	r26, r21
  ca:	a5 02       	muls	r26, r21
  cc:	8d 02       	muls	r24, r29
  ce:	67 01       	movw	r12, r14
  d0:	65 02       	muls	r22, r21
  d2:	05 02       	muls	r16, r21
  d4:	53 02       	muls	r21, r19

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf ef       	ldi	r28, 0xFF	; 255
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	12 e0       	ldi	r17, 0x02	; 2
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	e6 e9       	ldi	r30, 0x96	; 150
  ea:	fe e0       	ldi	r31, 0x0E	; 14
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	ac 39       	cpi	r26, 0x9C	; 156
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	22 e0       	ldi	r18, 0x02	; 2
  fa:	ac e9       	ldi	r26, 0x9C	; 156
  fc:	b2 e0       	ldi	r27, 0x02	; 2
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a9 3f       	cpi	r26, 0xF9	; 249
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
 10c:	0c 94 49 07 	jmp	0xe92	; 0xe92 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <timer_init>:
* timer initialization function
*********************************/
void timer_init(void)
{
	// timecount0 = 0; // initialize to 0
	tcnt0_start = 61; // begin timer count at 125
 114:	8d e3       	ldi	r24, 0x3D	; 61
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <tcnt0_start+0x1>
 11c:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <tcnt0_start>
	time_overflow = 1; // initialize to 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <time_overflow+0x1>
 128:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <time_overflow>
	b4_toggle_flag = 0;
 12c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <b4_toggle_flag+0x1>
 130:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <b4_toggle_flag>
	
	TCCR0B = (5<<CS00);	// Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	85 bd       	out	0x25, r24	; 37
	
	TCCR0A = 0;			// Not strictly necessary as these are the reset states
 138:	14 bc       	out	0x24, r1	; 36
	
	TCNT0 = tcnt0_start;	// assign timer count start
 13a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <tcnt0_start>
 13e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <tcnt0_start+0x1>
 142:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);	// Enable Timer 0 interrupt
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 14a:	08 95       	ret

0000014c <timer1_init>:
}

void timer1_init(void)
{
		TCCR1A = 0;											// Disable all o/p waveforms
 14c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
		TCCR1B = ((1<<ICNC1) | (0<<ICES1) | (2<<CS10));		// Noise Canceller on, falling edge, CLK/8 (2MHz) T1 source
 150:	82 e8       	ldi	r24, 0x82	; 130
 152:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		TIMSK1 = ((1<<ICIE1) | (1 << TOIE1));				// Enable T1 OVF, T1 Input Cap Interrupt
 156:	81 e2       	ldi	r24, 0x21	; 33
 158:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
		
		start_edge = 0;
 15c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <start_edge+0x1>
 160:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <start_edge>
		Time_Period = 0;
 164:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <Time_Period>
 168:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <Time_Period+0x1>
 16c:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <Time_Period+0x2>
 170:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <Time_Period+0x3>
		Time_Period_High = 0;						/* Initialise Time_Period_High - not measured yet  */
 174:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <Time_Period_High>
 178:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <Time_Period_High+0x1>
 17c:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <Time_Period_High+0x2>
 180:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <Time_Period_High+0x3>
		Time_Period_Low = 0;						/* Initialise Time_Period_Low - not measured yet  */
 184:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <Time_Period_Low>
 188:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <Time_Period_Low+0x1>
 18c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <Time_Period_Low+0x2>
 190:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <Time_Period_Low+0x3>
		capture_flag = 0;
 194:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <capture_flag+0x1>
 198:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <capture_flag>
 19c:	08 95       	ret

0000019e <adc_init>:
*********************************/
void adc_init(void)
{
	// initialize global variables

	adc_flag = 0; // set if new adc result available
 19e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <adc_flag+0x1>
 1a2:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <adc_flag>
	
	// ADC initialization
	ADMUX = ((1<<REFS0) | (0 << ADLAR) | (0<<MUX0));  // AVCC selected for VREF, ADC0 as ADC input
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = ((1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADIE) | (7<<ADPS0)); /* Enable ADC, Start Conversion, Auto Trigger enabled, 
 1ac:	8f ee       	ldi	r24, 0xEF	; 239
 1ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
																		Interrupt enabled, Prescale = 128  */
	ADCSRB = (4<<ADTS0); // Select AutoTrigger Source to Timer/Counter0 Overflow
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 1b8:	08 95       	ret

000001ba <Init_USART>:
}

void Init_USART(void)
{
	UCSR0A	= 0x00;				/* Not necessary  */
 1ba:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	
	UCSR0B	= (1<<RXEN0)|(1<<TXEN0)|(1<<TXCIE0);	  /*enable receiver, transmitter and transmit interrupt, 0x58;*/
 1be:	88 e5       	ldi	r24, 0x58	; 88
 1c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0	= 103;  /*baud rate = 9600, USART 2X = 0 so UBRR0 = ((16*10^6)/(16*9600))-1 = 103.167, rounded to 103 */
 1c4:	87 e6       	ldi	r24, 0x67	; 103
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 1d0:	08 95       	ret

000001d2 <sendmsg>:
/*this function loads the queue and */
/*starts the sending process*/
void sendmsg (char *s)
{
   qcntr = 0;    /*preset indices*/
   sndcntr = 1;  /*set to one because first character already sent*/
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <__data_end>
   queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
 1d8:	e2 ea       	ldi	r30, 0xA2	; 162
 1da:	f2 e0       	ldi	r31, 0x02	; 2
 1dc:	2d e0       	ldi	r18, 0x0D	; 13
 1de:	20 83       	st	Z, r18
   queue[qcntr++] = 0x0a;
 1e0:	22 e0       	ldi	r18, 0x02	; 2
 1e2:	20 93 9d 02 	sts	0x029D, r18	; 0x80029d <qcntr>
 1e6:	2a e0       	ldi	r18, 0x0A	; 10
 1e8:	21 83       	std	Z+1, r18	; 0x01
   while (*s) 
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	22 23       	and	r18, r18
 1f0:	79 f0       	breq	.+30     	; 0x210 <sendmsg+0x3e>
 1f2:	dc 01       	movw	r26, r24
      queue[qcntr++] = *s++;   /*put characters into queue*/
 1f4:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <qcntr>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	8e 0f       	add	r24, r30
 1fc:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <qcntr>
 200:	8d 91       	ld	r24, X+
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	ee 55       	subi	r30, 0x5E	; 94
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	80 83       	st	Z, r24
{
   qcntr = 0;    /*preset indices*/
   sndcntr = 1;  /*set to one because first character already sent*/
   queue[qcntr++] = 0x0d;   /*put CRLF into the queue first*/
   queue[qcntr++] = 0x0a;
   while (*s) 
 20a:	8c 91       	ld	r24, X
 20c:	81 11       	cpse	r24, r1
 20e:	f2 cf       	rjmp	.-28     	; 0x1f4 <sendmsg+0x22>
      queue[qcntr++] = *s++;   /*put characters into queue*/
   UDR0 = queue[0];  /*send first character to start process*/
 210:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <queue>
 214:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 218:	08 95       	ret

0000021a <main>:
}

int main(void)
{  
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	ec 97       	sbiw	r28, 0x3c	; 60
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
   char ch;  /* character variable for received character*/ 
   char buffer[60];  /* similar size to queue */
   
   DDRD = 0b11011000; // set PORTD bits 7,6,4,3 to outputs
 22e:	88 ed       	ldi	r24, 0xD8	; 216
 230:	8a b9       	out	0x0a, r24	; 10
   PORTD = 0;
 232:	1b b8       	out	0x0b, r1	; 11
   
   Init_USART();
 234:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Init_USART>
   timer_init();
 238:	0e 94 8a 00 	call	0x114	; 0x114 <timer_init>
   timer1_init();
 23c:	0e 94 a6 00 	call	0x14c	; 0x14c <timer1_init>
   adc_init();
 240:	0e 94 cf 00 	call	0x19e	; 0x19e <adc_init>
   unsigned int val = 0;
   sei(); /*global interrupt enable */
 244:	78 94       	sei
   while (1)         
   {
      if (UCSR0A & (1<<RXC0)) /*check for character received*/
 246:	0f 2e       	mov	r0, r31
 248:	f0 ec       	ldi	r31, 0xC0	; 192
 24a:	4f 2e       	mov	r4, r31
 24c:	51 2c       	mov	r5, r1
 24e:	f0 2d       	mov	r31, r0
			case 's':
				sprintf(buffer, "OCR2B Status: %d", OCR2B);
				sendmsg(buffer);
				break;
            default:
				sprintf(buffer, "Input not recognized.");
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	7c 01       	movw	r14, r24
				sprintf(buffer, "ADC Value: %u", adc_reading);
				sendmsg(buffer);
				break;
			case 'V':
			case 'v':
				adc_reading_mv = ((adc_reading*5000)/1024); // mV calculation
 256:	0f 2e       	mov	r0, r31
 258:	f8 e8       	ldi	r31, 0x88	; 136
 25a:	af 2e       	mov	r10, r31
 25c:	f3 e1       	ldi	r31, 0x13	; 19
 25e:	bf 2e       	mov	r11, r31
 260:	f0 2d       	mov	r31, r0
				sprintf(buffer, "ADC Value: %u mV", adc_reading_mv);
 262:	0f 2e       	mov	r0, r31
 264:	f3 ec       	ldi	r31, 0xC3	; 195
 266:	cf 2e       	mov	r12, r31
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	df 2e       	mov	r13, r31
 26c:	f0 2d       	mov	r31, r0
			case 's':
				sprintf(buffer, "OCR2B Status: %d", OCR2B);
				sendmsg(buffer);
				break;
            default:
				sprintf(buffer, "Input not recognized.");
 26e:	9e 2c       	mov	r9, r14
 270:	8f 2c       	mov	r8, r15
				adc_cont_flag = 0;
				break;
			case 'W':
			case 'w':
				sprintf(buffer, "Toggle the LED bit 4 at 125ms");
				b4_toggle_flag = 1;
 272:	01 e0       	ldi	r16, 0x01	; 1
 274:	10 e0       	ldi	r17, 0x00	; 0
				//sprintf(buffer, "val = %i", timer_cont_flag);
				sendmsg(buffer);
				break;
			case 'A':
			case 'a':
				sprintf(buffer, "ADC Value: %u", adc_reading);
 276:	0f 2e       	mov	r0, r31
 278:	f5 eb       	ldi	r31, 0xB5	; 181
 27a:	6f 2e       	mov	r6, r31
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	7f 2e       	mov	r7, r31
 280:	f0 2d       	mov	r31, r0
				break;
			case 'C':
			case 'c':
				//sprintf(buffer, "Continuously report timer input period in microseconds");
				timer_cont_flag = 1;
				sprintf(buffer, "val = %i", timer_cont_flag);
 282:	0f 2e       	mov	r0, r31
 284:	f2 e8       	ldi	r31, 0x82	; 130
 286:	2f 2e       	mov	r2, r31
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	3f 2e       	mov	r3, r31
 28c:	f0 2d       	mov	r31, r0
   adc_init();
   unsigned int val = 0;
   sei(); /*global interrupt enable */
   while (1)         
   {
      if (UCSR0A & (1<<RXC0)) /*check for character received*/
 28e:	d2 01       	movw	r26, r4
 290:	8c 91       	ld	r24, X
 292:	88 23       	and	r24, r24
 294:	0c f0       	brlt	.+2      	; 0x298 <main+0x7e>
 296:	66 c1       	rjmp	.+716    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
      {
		  if (capture_flag == 1)
 298:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <capture_flag>
 29c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <capture_flag+0x1>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <main+0x8c>
 2a4:	5f c1       	rjmp	.+702    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
		  {
			  capture_flag = 0;
 2a6:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <capture_flag+0x1>
 2aa:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <capture_flag>
         ch = UDR0;    /*get character sent from PC*/
 2ae:	a6 ec       	ldi	r26, 0xC6	; 198
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	ec 91       	ld	r30, X
         switch (ch)
 2b4:	8e 2f       	mov	r24, r30
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	e1 54       	subi	r30, 0x41	; 65
 2bc:	f1 09       	sbc	r31, r1
 2be:	e7 33       	cpi	r30, 0x37	; 55
 2c0:	f1 05       	cpc	r31, r1
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <main+0xac>
 2c4:	42 c1       	rjmp	.+644    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 2c6:	ec 5c       	subi	r30, 0xCC	; 204
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__tablejump2__>
         {
            case 'T':
			case 't':
				sprintf(buffer, "Period of 555 timer in microseconds: %lu", clocks);
 2ce:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <clocks>
 2d2:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <clocks+0x1>
 2d6:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <clocks+0x2>
 2da:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <clocks+0x3>
 2de:	bf 93       	push	r27
 2e0:	af 93       	push	r26
 2e2:	9f 93       	push	r25
 2e4:	8f 93       	push	r24
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	9f 93       	push	r25
 2ec:	8f 93       	push	r24
 2ee:	ff 92       	push	r15
 2f0:	ef 92       	push	r14
 2f2:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 2f6:	89 2d       	mov	r24, r9
 2f8:	98 2d       	mov	r25, r8
 2fa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	2d c1       	rjmp	.+602    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
            case 'L':
			case 'l':
				sprintf(buffer, "Low pulse of 555 timer in microseconds: %lu", Time_Period_Low);
 30a:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <Time_Period_Low+0x3>
 30e:	8f 93       	push	r24
 310:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <Time_Period_Low+0x2>
 314:	8f 93       	push	r24
 316:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <Time_Period_Low+0x1>
 31a:	8f 93       	push	r24
 31c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <Time_Period_Low>
 320:	8f 93       	push	r24
 322:	89 e2       	ldi	r24, 0x29	; 41
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	9f 93       	push	r25
 328:	8f 93       	push	r24
 32a:	ff 92       	push	r15
 32c:	ef 92       	push	r14
 32e:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 332:	89 2d       	mov	r24, r9
 334:	98 2d       	mov	r25, r8
 336:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
 344:	0f c1       	rjmp	.+542    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'H':
			case 'h':
				sprintf(buffer, "High pulse of 555 timer in microseconds: %lu", Time_Period_High);
 346:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <Time_Period_High+0x3>
 34a:	8f 93       	push	r24
 34c:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <Time_Period_High+0x2>
 350:	8f 93       	push	r24
 352:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Time_Period_High+0x1>
 356:	8f 93       	push	r24
 358:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <Time_Period_High>
 35c:	8f 93       	push	r24
 35e:	85 e5       	ldi	r24, 0x55	; 85
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	9f 93       	push	r25
 364:	8f 93       	push	r24
 366:	ff 92       	push	r15
 368:	ef 92       	push	r14
 36a:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 36e:	89 2d       	mov	r24, r9
 370:	98 2d       	mov	r25, r8
 372:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	f1 c0       	rjmp	.+482    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'C':
			case 'c':
				//sprintf(buffer, "Continuously report timer input period in microseconds");
				timer_cont_flag = 1;
 382:	10 93 d9 02 	sts	0x02D9, r17	; 0x8002d9 <timer_cont_flag+0x1>
 386:	00 93 d8 02 	sts	0x02D8, r16	; 0x8002d8 <timer_cont_flag>
				sprintf(buffer, "val = %i", timer_cont_flag);
 38a:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <timer_cont_flag>
 38e:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <timer_cont_flag+0x1>
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	3f 92       	push	r3
 398:	2f 92       	push	r2
 39a:	ff 92       	push	r15
 39c:	ef 92       	push	r14
 39e:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 3a2:	89 2d       	mov	r24, r9
 3a4:	98 2d       	mov	r25, r8
 3a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	d6 c0       	rjmp	.+428    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'E':
			case 'e':
				sprintf(buffer, "Continuous timer input reporting stopped.");
 3b8:	8a e2       	ldi	r24, 0x2A	; 42
 3ba:	eb e8       	ldi	r30, 0x8B	; 139
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	a9 2d       	mov	r26, r9
 3c0:	b8 2d       	mov	r27, r8
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x1a8>
				timer_cont_flag = 0;
 3ca:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <timer_cont_flag+0x1>
 3ce:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <timer_cont_flag>
				//sprintf(buffer, "val = %i", timer_cont_flag);
				sendmsg(buffer);
 3d2:	89 2d       	mov	r24, r9
 3d4:	98 2d       	mov	r25, r8
 3d6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 3da:	c4 c0       	rjmp	.+392    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'A':
			case 'a':
				sprintf(buffer, "ADC Value: %u", adc_reading);
 3dc:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <adc_reading>
 3e0:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <adc_reading+0x1>
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	7f 92       	push	r7
 3ea:	6f 92       	push	r6
 3ec:	ff 92       	push	r15
 3ee:	ef 92       	push	r14
 3f0:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 3f4:	89 2d       	mov	r24, r9
 3f6:	98 2d       	mov	r25, r8
 3f8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	ad c0       	rjmp	.+346    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'V':
			case 'v':
				adc_reading_mv = ((adc_reading*5000)/1024); // mV calculation
 40a:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <adc_reading>
 40e:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <adc_reading+0x1>
 412:	2a 9d       	mul	r18, r10
 414:	c0 01       	movw	r24, r0
 416:	2b 9d       	mul	r18, r11
 418:	90 0d       	add	r25, r0
 41a:	3a 9d       	mul	r19, r10
 41c:	90 0d       	add	r25, r0
 41e:	11 24       	eor	r1, r1
 420:	89 2f       	mov	r24, r25
 422:	99 27       	eor	r25, r25
 424:	86 95       	lsr	r24
 426:	86 95       	lsr	r24
 428:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <adc_reading_mv+0x1>
 42c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <adc_reading_mv>
				sprintf(buffer, "ADC Value: %u mV", adc_reading_mv);
 430:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <adc_reading_mv>
 434:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <adc_reading_mv+0x1>
 438:	9f 93       	push	r25
 43a:	8f 93       	push	r24
 43c:	df 92       	push	r13
 43e:	cf 92       	push	r12
 440:	ff 92       	push	r15
 442:	ef 92       	push	r14
 444:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 448:	89 2d       	mov	r24, r9
 44a:	98 2d       	mov	r25, r8
 44c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	83 c0       	rjmp	.+262    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'M':
			case 'm':
				sprintf(buffer, "Continuously report ADC0 conversion result in mV");
 45e:	81 e3       	ldi	r24, 0x31	; 49
 460:	e4 ed       	ldi	r30, 0xD4	; 212
 462:	f1 e0       	ldi	r31, 0x01	; 1
 464:	a9 2d       	mov	r26, r9
 466:	b8 2d       	mov	r27, r8
 468:	01 90       	ld	r0, Z+
 46a:	0d 92       	st	X+, r0
 46c:	8a 95       	dec	r24
 46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				sendmsg(buffer);
 470:	89 2d       	mov	r24, r9
 472:	98 2d       	mov	r25, r8
 474:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				adc_cont_flag = 1;
 478:	10 93 ed 02 	sts	0x02ED, r17	; 0x8002ed <adc_cont_flag+0x1>
 47c:	00 93 ec 02 	sts	0x02EC, r16	; 0x8002ec <adc_cont_flag>
				break;
 480:	71 c0       	rjmp	.+226    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'N':
			case 'n':
				sprintf(buffer, "Stop continuous reporting of ADC0 input");
 482:	88 e2       	ldi	r24, 0x28	; 40
 484:	e5 e0       	ldi	r30, 0x05	; 5
 486:	f2 e0       	ldi	r31, 0x02	; 2
 488:	a9 2d       	mov	r26, r9
 48a:	b8 2d       	mov	r27, r8
 48c:	01 90       	ld	r0, Z+
 48e:	0d 92       	st	X+, r0
 490:	8a 95       	dec	r24
 492:	e1 f7       	brne	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				sendmsg(buffer);
 494:	89 2d       	mov	r24, r9
 496:	98 2d       	mov	r25, r8
 498:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				adc_cont_flag = 0;
 49c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <adc_cont_flag+0x1>
 4a0:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <adc_cont_flag>
				break;
 4a4:	5f c0       	rjmp	.+190    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'W':
			case 'w':
				sprintf(buffer, "Toggle the LED bit 4 at 125ms");
 4a6:	8e e1       	ldi	r24, 0x1E	; 30
 4a8:	ed e2       	ldi	r30, 0x2D	; 45
 4aa:	f2 e0       	ldi	r31, 0x02	; 2
 4ac:	a9 2d       	mov	r26, r9
 4ae:	b8 2d       	mov	r27, r8
 4b0:	01 90       	ld	r0, Z+
 4b2:	0d 92       	st	X+, r0
 4b4:	8a 95       	dec	r24
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				b4_toggle_flag = 1;
 4b8:	10 93 d5 02 	sts	0x02D5, r17	; 0x8002d5 <b4_toggle_flag+0x1>
 4bc:	00 93 d4 02 	sts	0x02D4, r16	; 0x8002d4 <b4_toggle_flag>
				sendmsg(buffer);
 4c0:	89 2d       	mov	r24, r9
 4c2:	98 2d       	mov	r25, r8
 4c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 4c8:	4d c0       	rjmp	.+154    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'U':
			case 'u':
				sprintf(buffer, "Stop toggling LED bit 4");
 4ca:	88 e1       	ldi	r24, 0x18	; 24
 4cc:	eb e4       	ldi	r30, 0x4B	; 75
 4ce:	f2 e0       	ldi	r31, 0x02	; 2
 4d0:	a9 2d       	mov	r26, r9
 4d2:	b8 2d       	mov	r27, r8
 4d4:	01 90       	ld	r0, Z+
 4d6:	0d 92       	st	X+, r0
 4d8:	8a 95       	dec	r24
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
				b4_toggle_flag = 0;
 4dc:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <b4_toggle_flag+0x1>
 4e0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <b4_toggle_flag>
				sendmsg(buffer);
 4e4:	89 2d       	mov	r24, r9
 4e6:	98 2d       	mov	r25, r8
 4e8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 4ec:	3b c0       	rjmp	.+118    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'P':
			case 'p':
				sprintf(buffer, "PORTD Status: %X", PIND);
 4ee:	89 b1       	in	r24, 0x09	; 9
 4f0:	1f 92       	push	r1
 4f2:	8f 93       	push	r24
 4f4:	83 e6       	ldi	r24, 0x63	; 99
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	9f 93       	push	r25
 4fa:	8f 93       	push	r24
 4fc:	ff 92       	push	r15
 4fe:	ef 92       	push	r14
 500:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 504:	89 2d       	mov	r24, r9
 506:	98 2d       	mov	r25, r8
 508:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
 518:	25 c0       	rjmp	.+74     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			case 'S':
			case 's':
				sprintf(buffer, "OCR2B Status: %d", OCR2B);
 51a:	e4 eb       	ldi	r30, 0xB4	; 180
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	1f 92       	push	r1
 522:	8f 93       	push	r24
 524:	84 e7       	ldi	r24, 0x74	; 116
 526:	92 e0       	ldi	r25, 0x02	; 2
 528:	9f 93       	push	r25
 52a:	8f 93       	push	r24
 52c:	ff 92       	push	r15
 52e:	ef 92       	push	r14
 530:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
				sendmsg(buffer);
 534:	89 2d       	mov	r24, r9
 536:	98 2d       	mov	r25, r8
 538:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0d c0       	rjmp	.+26     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
            default:
				sprintf(buffer, "Input not recognized.");
 54a:	86 e1       	ldi	r24, 0x16	; 22
 54c:	e5 e8       	ldi	r30, 0x85	; 133
 54e:	f2 e0       	ldi	r31, 0x02	; 2
 550:	a9 2d       	mov	r26, r9
 552:	b8 2d       	mov	r27, r8
 554:	01 90       	ld	r0, Z+
 556:	0d 92       	st	X+, r0
 558:	8a 95       	dec	r24
 55a:	e1 f7       	brne	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
				sendmsg(buffer); /*send second message*/
 55c:	89 2d       	mov	r24, r9
 55e:	98 2d       	mov	r25, r8
 560:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
				break;
         } 
      } 
		 }
	  if (timer_cont_flag == 1)
 564:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <timer_cont_flag>
 568:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <timer_cont_flag+0x1>
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	11 f5       	brne	.+68     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
	  {
		  val = Time_Period_High + Time_Period_Low;
		  sprintf(buffer, "Value: %u", val);
 570:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <Time_Period_High>
 574:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <Time_Period_High+0x1>
 578:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <Time_Period_Low>
 57c:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <Time_Period_Low+0x1>
 580:	82 0f       	add	r24, r18
 582:	93 1f       	adc	r25, r19
 584:	9f 93       	push	r25
 586:	8f 93       	push	r24
 588:	89 eb       	ldi	r24, 0xB9	; 185
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	9f 93       	push	r25
 58e:	8f 93       	push	r24
 590:	ff 92       	push	r15
 592:	ef 92       	push	r14
 594:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
		  sendmsg(buffer);
 598:	89 2d       	mov	r24, r9
 59a:	98 2d       	mov	r25, r8
 59c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
		  capture_flag = 0;
 5a0:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <capture_flag+0x1>
 5a4:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <capture_flag>
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
	  }
	  if (adc_cont_flag == 1)
 5b4:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <adc_cont_flag>
 5b8:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <adc_cont_flag+0x1>
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c0:	66 ce       	rjmp	.-820    	; 0x28e <main+0x74>
	  {
		  adc_reading_mv = ((adc_reading*5000)/1024); // mV calculation
 5c2:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <adc_reading>
 5c6:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <adc_reading+0x1>
 5ca:	2a 9d       	mul	r18, r10
 5cc:	c0 01       	movw	r24, r0
 5ce:	2b 9d       	mul	r18, r11
 5d0:	90 0d       	add	r25, r0
 5d2:	3a 9d       	mul	r19, r10
 5d4:	90 0d       	add	r25, r0
 5d6:	11 24       	eor	r1, r1
 5d8:	89 2f       	mov	r24, r25
 5da:	99 27       	eor	r25, r25
 5dc:	86 95       	lsr	r24
 5de:	86 95       	lsr	r24
 5e0:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <adc_reading_mv+0x1>
 5e4:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <adc_reading_mv>
		  sprintf(buffer, "ADC Value: %u mV", adc_reading_mv);
 5e8:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <adc_reading_mv>
 5ec:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <adc_reading_mv+0x1>
 5f0:	9f 93       	push	r25
 5f2:	8f 93       	push	r24
 5f4:	df 92       	push	r13
 5f6:	cf 92       	push	r12
 5f8:	ff 92       	push	r15
 5fa:	ef 92       	push	r14
 5fc:	0e 94 5f 04 	call	0x8be	; 0x8be <sprintf>
		  sendmsg(buffer);
 600:	89 2d       	mov	r24, r9
 602:	98 2d       	mov	r25, r8
 604:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <sendmsg>
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	2e ce       	rjmp	.-932    	; 0x272 <main+0x58>

00000616 <__vector_20>:
} 

/*this interrupt occurs whenever the */
/*USART has completed sending a character*/
ISR(USART_TX_vect)
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	8f 93       	push	r24
 622:	ef 93       	push	r30
 624:	ff 93       	push	r31
   /*send next character and increment index*/
   if (qcntr != sndcntr)  
 626:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <__data_end>
 62a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <qcntr>
 62e:	8e 17       	cp	r24, r30
 630:	51 f0       	breq	.+20     	; 0x646 <__vector_20+0x30>
      UDR0 = queue[sndcntr++]; 
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	8e 0f       	add	r24, r30
 636:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end>
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	ee 55       	subi	r30, 0x5E	; 94
 63e:	fd 4f       	sbci	r31, 0xFD	; 253
 640:	80 81       	ld	r24, Z
 642:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
} 
 646:	ff 91       	pop	r31
 648:	ef 91       	pop	r30
 64a:	8f 91       	pop	r24
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
	TCNT0 = tcnt0_start;
 668:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <tcnt0_start>
 66c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <tcnt0_start+0x1>
 670:	86 bd       	out	0x26, r24	; 38
	++timecount0;
 672:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <timecount0>
 676:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <timecount0+0x1>
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <timecount0+0x1>
 680:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <timecount0>
	
	if (b4_toggle_flag == 1)
 684:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <b4_toggle_flag>
 688:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <b4_toggle_flag+0x1>
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	a1 f4       	brne	.+40     	; 0x6b8 <__vector_16+0x62>
	{
		if (timecount0 >= time_overflow)
 690:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <timecount0>
 694:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <timecount0+0x1>
 698:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <time_overflow>
 69c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <time_overflow+0x1>
 6a0:	28 17       	cp	r18, r24
 6a2:	39 07       	cpc	r19, r25
 6a4:	50 f0       	brcs	.+20     	; 0x6ba <__vector_16+0x64>
		{
			PORTD ^= (1<<PORTD4);
 6a6:	9b b1       	in	r25, 0x0b	; 11
 6a8:	80 e1       	ldi	r24, 0x10	; 16
 6aa:	89 27       	eor	r24, r25
 6ac:	8b b9       	out	0x0b, r24	; 11
			timecount0 = 0;
 6ae:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <timecount0+0x1>
 6b2:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <timecount0>
 6b6:	01 c0       	rjmp	.+2      	; 0x6ba <__vector_16+0x64>
		}
	} else {
		PORTD &= ~(1<<PORTD4);
 6b8:	5c 98       	cbi	0x0b, 4	; 11
	}
}
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	8f 93       	push	r24
	++timecount1;
 6d8:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <timecount1>
 6dc:	8f 5f       	subi	r24, 0xFF	; 255
 6de:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <timecount1>
}
 6e2:	8f 91       	pop	r24
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 6ee:	1f 92       	push	r1
 6f0:	0f 92       	push	r0
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	0f 92       	push	r0
 6f6:	11 24       	eor	r1, r1
 6f8:	2f 93       	push	r18
 6fa:	3f 93       	push	r19
 6fc:	4f 93       	push	r20
 6fe:	5f 93       	push	r21
 700:	6f 93       	push	r22
 702:	7f 93       	push	r23
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	af 93       	push	r26
 70a:	bf 93       	push	r27
 70c:	ef 93       	push	r30
 70e:	ff 93       	push	r31
	
	
	end_edge = ICR1;
 710:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 714:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 718:	30 93 f5 02 	sts	0x02F5, r19	; 0x8002f5 <end_edge+0x1>
 71c:	20 93 f4 02 	sts	0x02F4, r18	; 0x8002f4 <end_edge>
	capture_flag = 1;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <capture_flag+0x1>
 728:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <capture_flag>
	clocks = ((unsigned long)timecount1 * 65536) + (unsigned long)end_edge - (unsigned long)start_edge;
 72c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <timecount1>
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	a0 e0       	ldi	r26, 0x00	; 0
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	dc 01       	movw	r26, r24
 738:	99 27       	eor	r25, r25
 73a:	88 27       	eor	r24, r24
 73c:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <start_edge>
 740:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <start_edge+0x1>
 744:	84 1b       	sub	r24, r20
 746:	95 0b       	sbc	r25, r21
 748:	a1 09       	sbc	r26, r1
 74a:	b1 09       	sbc	r27, r1
 74c:	82 0f       	add	r24, r18
 74e:	93 1f       	adc	r25, r19
 750:	a1 1d       	adc	r26, r1
 752:	b1 1d       	adc	r27, r1
 754:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <clocks>
 758:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <clocks+0x1>
 75c:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <clocks+0x2>
 760:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <clocks+0x3>
	Time_Period = (clocks/2);
 764:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <clocks>
 768:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <clocks+0x1>
 76c:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <clocks+0x2>
 770:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <clocks+0x3>
 774:	b6 95       	lsr	r27
 776:	a7 95       	ror	r26
 778:	97 95       	ror	r25
 77a:	87 95       	ror	r24
 77c:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <Time_Period>
 780:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <Time_Period+0x1>
 784:	a0 93 a0 02 	sts	0x02A0, r26	; 0x8002a0 <Time_Period+0x2>
 788:	b0 93 a1 02 	sts	0x02A1, r27	; 0x8002a1 <Time_Period+0x3>
	
	if (TCCR1B &(1<<ICES1) == (1<<ICES1))
 78c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 790:	80 ff       	sbrs	r24, 0
 792:	15 c0       	rjmp	.+42     	; 0x7be <__vector_10+0xd0>
	{
		Time_Period_Low = (clocks/2);
 794:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <clocks>
 798:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <clocks+0x1>
 79c:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <clocks+0x2>
 7a0:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <clocks+0x3>
 7a4:	b6 95       	lsr	r27
 7a6:	a7 95       	ror	r26
 7a8:	97 95       	ror	r25
 7aa:	87 95       	ror	r24
 7ac:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <Time_Period_Low>
 7b0:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <Time_Period_Low+0x1>
 7b4:	a0 93 f0 02 	sts	0x02F0, r26	; 0x8002f0 <Time_Period_Low+0x2>
 7b8:	b0 93 f1 02 	sts	0x02F1, r27	; 0x8002f1 <Time_Period_Low+0x3>
 7bc:	14 c0       	rjmp	.+40     	; 0x7e6 <__vector_10+0xf8>
	} else {
		Time_Period_High = (clocks/2);
 7be:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <clocks>
 7c2:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <clocks+0x1>
 7c6:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <clocks+0x2>
 7ca:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <clocks+0x3>
 7ce:	b6 95       	lsr	r27
 7d0:	a7 95       	ror	r26
 7d2:	97 95       	ror	r25
 7d4:	87 95       	ror	r24
 7d6:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <Time_Period_High>
 7da:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <Time_Period_High+0x1>
 7de:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <Time_Period_High+0x2>
 7e2:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <Time_Period_High+0x3>
	}
	TCCR1B = TCCR1B ^ (1<<ICES1);
 7e6:	e1 e8       	ldi	r30, 0x81	; 129
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	90 81       	ld	r25, Z
 7ec:	80 e4       	ldi	r24, 0x40	; 64
 7ee:	89 27       	eor	r24, r25
 7f0:	80 83       	st	Z, r24
	
	start_edge = end_edge;
 7f2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <end_edge>
 7f6:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <end_edge+0x1>
 7fa:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <start_edge+0x1>
 7fe:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <start_edge>
	timecount1 = 0;
 802:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <timecount1>
	
	if((Time_Period_High+Time_Period_Low)>HUNDRED_MICROSECONDS)
 806:	40 91 e4 02 	lds	r20, 0x02E4	; 0x8002e4 <Time_Period_High>
 80a:	50 91 e5 02 	lds	r21, 0x02E5	; 0x8002e5 <Time_Period_High+0x1>
 80e:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <Time_Period_High+0x2>
 812:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <Time_Period_High+0x3>
 816:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <Time_Period_Low>
 81a:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <Time_Period_Low+0x1>
 81e:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <Time_Period_Low+0x2>
 822:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <Time_Period_Low+0x3>
 826:	84 0f       	add	r24, r20
 828:	95 1f       	adc	r25, r21
 82a:	a6 1f       	adc	r26, r22
 82c:	b7 1f       	adc	r27, r23
 82e:	85 36       	cpi	r24, 0x65	; 101
 830:	91 05       	cpc	r25, r1
 832:	a1 05       	cpc	r26, r1
 834:	b1 05       	cpc	r27, r1
 836:	10 f0       	brcs	.+4      	; 0x83c <__vector_10+0x14e>
	{
		PORTD |= (1<<PORTD6);
 838:	5e 9a       	sbi	0x0b, 6	; 11
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__vector_10+0x152>
	} else {
		PORTD &= ~(0<<PORTD6);
 83c:	8b b1       	in	r24, 0x0b	; 11
 83e:	8b b9       	out	0x0b, r24	; 11
	}
}
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	bf 91       	pop	r27
 846:	af 91       	pop	r26
 848:	9f 91       	pop	r25
 84a:	8f 91       	pop	r24
 84c:	7f 91       	pop	r23
 84e:	6f 91       	pop	r22
 850:	5f 91       	pop	r21
 852:	4f 91       	pop	r20
 854:	3f 91       	pop	r19
 856:	2f 91       	pop	r18
 858:	0f 90       	pop	r0
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	0f 90       	pop	r0
 85e:	1f 90       	pop	r1
 860:	18 95       	reti

00000862 <__vector_21>:

ISR(ADC_vect)
{
 862:	1f 92       	push	r1
 864:	0f 92       	push	r0
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	0f 92       	push	r0
 86a:	11 24       	eor	r1, r1
 86c:	2f 93       	push	r18
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
	adc_reading = ADC;
 872:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 876:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 87a:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <adc_reading+0x1>
 87e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <adc_reading>
	adc_flag = 1;
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <adc_flag+0x1>
 88a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <adc_flag>
	
	if((adc_reading) > FOUR_VOLTS)
 88e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <adc_reading>
 892:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <adc_reading+0x1>
 896:	83 33       	cpi	r24, 0x33	; 51
 898:	93 40       	sbci	r25, 0x03	; 3
 89a:	10 f0       	brcs	.+4      	; 0x8a0 <__vector_21+0x3e>
	{
		PORTD |= (1<<PORTD7);
 89c:	5f 9a       	sbi	0x0b, 7	; 11
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__vector_21+0x40>
	} else {
		PORTD &= ~(1<<PORTD7);
 8a0:	5f 98       	cbi	0x0b, 7	; 11
	}
}
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	2f 91       	pop	r18
 8a8:	0f 90       	pop	r0
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	0f 90       	pop	r0
 8ae:	1f 90       	pop	r1
 8b0:	18 95       	reti

000008b2 <__tablejump2__>:
 8b2:	ee 0f       	add	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	05 90       	lpm	r0, Z+
 8b8:	f4 91       	lpm	r31, Z
 8ba:	e0 2d       	mov	r30, r0
 8bc:	09 94       	ijmp

000008be <sprintf>:
 8be:	ae e0       	ldi	r26, 0x0E	; 14
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	e5 e6       	ldi	r30, 0x65	; 101
 8c4:	f4 e0       	ldi	r31, 0x04	; 4
 8c6:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__prologue_saves__+0x1c>
 8ca:	0d 89       	ldd	r16, Y+21	; 0x15
 8cc:	1e 89       	ldd	r17, Y+22	; 0x16
 8ce:	86 e0       	ldi	r24, 0x06	; 6
 8d0:	8c 83       	std	Y+4, r24	; 0x04
 8d2:	1a 83       	std	Y+2, r17	; 0x02
 8d4:	09 83       	std	Y+1, r16	; 0x01
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	9f e7       	ldi	r25, 0x7F	; 127
 8da:	9e 83       	std	Y+6, r25	; 0x06
 8dc:	8d 83       	std	Y+5, r24	; 0x05
 8de:	ae 01       	movw	r20, r28
 8e0:	47 5e       	subi	r20, 0xE7	; 231
 8e2:	5f 4f       	sbci	r21, 0xFF	; 255
 8e4:	6f 89       	ldd	r22, Y+23	; 0x17
 8e6:	78 8d       	ldd	r23, Y+24	; 0x18
 8e8:	ce 01       	movw	r24, r28
 8ea:	01 96       	adiw	r24, 0x01	; 1
 8ec:	0e 94 81 04 	call	0x902	; 0x902 <vfprintf>
 8f0:	ef 81       	ldd	r30, Y+7	; 0x07
 8f2:	f8 85       	ldd	r31, Y+8	; 0x08
 8f4:	e0 0f       	add	r30, r16
 8f6:	f1 1f       	adc	r31, r17
 8f8:	10 82       	st	Z, r1
 8fa:	2e 96       	adiw	r28, 0x0e	; 14
 8fc:	e4 e0       	ldi	r30, 0x04	; 4
 8fe:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__epilogue_restores__+0x1c>

00000902 <vfprintf>:
 902:	ab e0       	ldi	r26, 0x0B	; 11
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	e7 e8       	ldi	r30, 0x87	; 135
 908:	f4 e0       	ldi	r31, 0x04	; 4
 90a:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__prologue_saves__>
 90e:	6c 01       	movw	r12, r24
 910:	7b 01       	movw	r14, r22
 912:	8a 01       	movw	r16, r20
 914:	fc 01       	movw	r30, r24
 916:	17 82       	std	Z+7, r1	; 0x07
 918:	16 82       	std	Z+6, r1	; 0x06
 91a:	83 81       	ldd	r24, Z+3	; 0x03
 91c:	81 ff       	sbrs	r24, 1
 91e:	cc c1       	rjmp	.+920    	; 0xcb8 <vfprintf+0x3b6>
 920:	ce 01       	movw	r24, r28
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	3c 01       	movw	r6, r24
 926:	f6 01       	movw	r30, r12
 928:	93 81       	ldd	r25, Z+3	; 0x03
 92a:	f7 01       	movw	r30, r14
 92c:	93 fd       	sbrc	r25, 3
 92e:	85 91       	lpm	r24, Z+
 930:	93 ff       	sbrs	r25, 3
 932:	81 91       	ld	r24, Z+
 934:	7f 01       	movw	r14, r30
 936:	88 23       	and	r24, r24
 938:	09 f4       	brne	.+2      	; 0x93c <vfprintf+0x3a>
 93a:	ba c1       	rjmp	.+884    	; 0xcb0 <vfprintf+0x3ae>
 93c:	85 32       	cpi	r24, 0x25	; 37
 93e:	39 f4       	brne	.+14     	; 0x94e <vfprintf+0x4c>
 940:	93 fd       	sbrc	r25, 3
 942:	85 91       	lpm	r24, Z+
 944:	93 ff       	sbrs	r25, 3
 946:	81 91       	ld	r24, Z+
 948:	7f 01       	movw	r14, r30
 94a:	85 32       	cpi	r24, 0x25	; 37
 94c:	29 f4       	brne	.+10     	; 0x958 <vfprintf+0x56>
 94e:	b6 01       	movw	r22, r12
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 956:	e7 cf       	rjmp	.-50     	; 0x926 <vfprintf+0x24>
 958:	91 2c       	mov	r9, r1
 95a:	21 2c       	mov	r2, r1
 95c:	31 2c       	mov	r3, r1
 95e:	ff e1       	ldi	r31, 0x1F	; 31
 960:	f3 15       	cp	r31, r3
 962:	d8 f0       	brcs	.+54     	; 0x99a <vfprintf+0x98>
 964:	8b 32       	cpi	r24, 0x2B	; 43
 966:	79 f0       	breq	.+30     	; 0x986 <vfprintf+0x84>
 968:	38 f4       	brcc	.+14     	; 0x978 <vfprintf+0x76>
 96a:	80 32       	cpi	r24, 0x20	; 32
 96c:	79 f0       	breq	.+30     	; 0x98c <vfprintf+0x8a>
 96e:	83 32       	cpi	r24, 0x23	; 35
 970:	a1 f4       	brne	.+40     	; 0x99a <vfprintf+0x98>
 972:	23 2d       	mov	r18, r3
 974:	20 61       	ori	r18, 0x10	; 16
 976:	1d c0       	rjmp	.+58     	; 0x9b2 <vfprintf+0xb0>
 978:	8d 32       	cpi	r24, 0x2D	; 45
 97a:	61 f0       	breq	.+24     	; 0x994 <vfprintf+0x92>
 97c:	80 33       	cpi	r24, 0x30	; 48
 97e:	69 f4       	brne	.+26     	; 0x99a <vfprintf+0x98>
 980:	23 2d       	mov	r18, r3
 982:	21 60       	ori	r18, 0x01	; 1
 984:	16 c0       	rjmp	.+44     	; 0x9b2 <vfprintf+0xb0>
 986:	83 2d       	mov	r24, r3
 988:	82 60       	ori	r24, 0x02	; 2
 98a:	38 2e       	mov	r3, r24
 98c:	e3 2d       	mov	r30, r3
 98e:	e4 60       	ori	r30, 0x04	; 4
 990:	3e 2e       	mov	r3, r30
 992:	2a c0       	rjmp	.+84     	; 0x9e8 <vfprintf+0xe6>
 994:	f3 2d       	mov	r31, r3
 996:	f8 60       	ori	r31, 0x08	; 8
 998:	1d c0       	rjmp	.+58     	; 0x9d4 <vfprintf+0xd2>
 99a:	37 fc       	sbrc	r3, 7
 99c:	2d c0       	rjmp	.+90     	; 0x9f8 <vfprintf+0xf6>
 99e:	20 ed       	ldi	r18, 0xD0	; 208
 9a0:	28 0f       	add	r18, r24
 9a2:	2a 30       	cpi	r18, 0x0A	; 10
 9a4:	40 f0       	brcs	.+16     	; 0x9b6 <vfprintf+0xb4>
 9a6:	8e 32       	cpi	r24, 0x2E	; 46
 9a8:	b9 f4       	brne	.+46     	; 0x9d8 <vfprintf+0xd6>
 9aa:	36 fc       	sbrc	r3, 6
 9ac:	81 c1       	rjmp	.+770    	; 0xcb0 <vfprintf+0x3ae>
 9ae:	23 2d       	mov	r18, r3
 9b0:	20 64       	ori	r18, 0x40	; 64
 9b2:	32 2e       	mov	r3, r18
 9b4:	19 c0       	rjmp	.+50     	; 0x9e8 <vfprintf+0xe6>
 9b6:	36 fe       	sbrs	r3, 6
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <vfprintf+0xc4>
 9ba:	8a e0       	ldi	r24, 0x0A	; 10
 9bc:	98 9e       	mul	r9, r24
 9be:	20 0d       	add	r18, r0
 9c0:	11 24       	eor	r1, r1
 9c2:	92 2e       	mov	r9, r18
 9c4:	11 c0       	rjmp	.+34     	; 0x9e8 <vfprintf+0xe6>
 9c6:	ea e0       	ldi	r30, 0x0A	; 10
 9c8:	2e 9e       	mul	r2, r30
 9ca:	20 0d       	add	r18, r0
 9cc:	11 24       	eor	r1, r1
 9ce:	22 2e       	mov	r2, r18
 9d0:	f3 2d       	mov	r31, r3
 9d2:	f0 62       	ori	r31, 0x20	; 32
 9d4:	3f 2e       	mov	r3, r31
 9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <vfprintf+0xe6>
 9d8:	8c 36       	cpi	r24, 0x6C	; 108
 9da:	21 f4       	brne	.+8      	; 0x9e4 <vfprintf+0xe2>
 9dc:	83 2d       	mov	r24, r3
 9de:	80 68       	ori	r24, 0x80	; 128
 9e0:	38 2e       	mov	r3, r24
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <vfprintf+0xe6>
 9e4:	88 36       	cpi	r24, 0x68	; 104
 9e6:	41 f4       	brne	.+16     	; 0x9f8 <vfprintf+0xf6>
 9e8:	f7 01       	movw	r30, r14
 9ea:	93 fd       	sbrc	r25, 3
 9ec:	85 91       	lpm	r24, Z+
 9ee:	93 ff       	sbrs	r25, 3
 9f0:	81 91       	ld	r24, Z+
 9f2:	7f 01       	movw	r14, r30
 9f4:	81 11       	cpse	r24, r1
 9f6:	b3 cf       	rjmp	.-154    	; 0x95e <vfprintf+0x5c>
 9f8:	98 2f       	mov	r25, r24
 9fa:	9f 7d       	andi	r25, 0xDF	; 223
 9fc:	95 54       	subi	r25, 0x45	; 69
 9fe:	93 30       	cpi	r25, 0x03	; 3
 a00:	28 f4       	brcc	.+10     	; 0xa0c <vfprintf+0x10a>
 a02:	0c 5f       	subi	r16, 0xFC	; 252
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	9f e3       	ldi	r25, 0x3F	; 63
 a08:	99 83       	std	Y+1, r25	; 0x01
 a0a:	0d c0       	rjmp	.+26     	; 0xa26 <vfprintf+0x124>
 a0c:	83 36       	cpi	r24, 0x63	; 99
 a0e:	31 f0       	breq	.+12     	; 0xa1c <vfprintf+0x11a>
 a10:	83 37       	cpi	r24, 0x73	; 115
 a12:	71 f0       	breq	.+28     	; 0xa30 <vfprintf+0x12e>
 a14:	83 35       	cpi	r24, 0x53	; 83
 a16:	09 f0       	breq	.+2      	; 0xa1a <vfprintf+0x118>
 a18:	59 c0       	rjmp	.+178    	; 0xacc <vfprintf+0x1ca>
 a1a:	21 c0       	rjmp	.+66     	; 0xa5e <vfprintf+0x15c>
 a1c:	f8 01       	movw	r30, r16
 a1e:	80 81       	ld	r24, Z
 a20:	89 83       	std	Y+1, r24	; 0x01
 a22:	0e 5f       	subi	r16, 0xFE	; 254
 a24:	1f 4f       	sbci	r17, 0xFF	; 255
 a26:	88 24       	eor	r8, r8
 a28:	83 94       	inc	r8
 a2a:	91 2c       	mov	r9, r1
 a2c:	53 01       	movw	r10, r6
 a2e:	13 c0       	rjmp	.+38     	; 0xa56 <vfprintf+0x154>
 a30:	28 01       	movw	r4, r16
 a32:	f2 e0       	ldi	r31, 0x02	; 2
 a34:	4f 0e       	add	r4, r31
 a36:	51 1c       	adc	r5, r1
 a38:	f8 01       	movw	r30, r16
 a3a:	a0 80       	ld	r10, Z
 a3c:	b1 80       	ldd	r11, Z+1	; 0x01
 a3e:	36 fe       	sbrs	r3, 6
 a40:	03 c0       	rjmp	.+6      	; 0xa48 <vfprintf+0x146>
 a42:	69 2d       	mov	r22, r9
 a44:	70 e0       	ldi	r23, 0x00	; 0
 a46:	02 c0       	rjmp	.+4      	; 0xa4c <vfprintf+0x14a>
 a48:	6f ef       	ldi	r22, 0xFF	; 255
 a4a:	7f ef       	ldi	r23, 0xFF	; 255
 a4c:	c5 01       	movw	r24, r10
 a4e:	0e 94 6d 06 	call	0xcda	; 0xcda <strnlen>
 a52:	4c 01       	movw	r8, r24
 a54:	82 01       	movw	r16, r4
 a56:	f3 2d       	mov	r31, r3
 a58:	ff 77       	andi	r31, 0x7F	; 127
 a5a:	3f 2e       	mov	r3, r31
 a5c:	16 c0       	rjmp	.+44     	; 0xa8a <vfprintf+0x188>
 a5e:	28 01       	movw	r4, r16
 a60:	22 e0       	ldi	r18, 0x02	; 2
 a62:	42 0e       	add	r4, r18
 a64:	51 1c       	adc	r5, r1
 a66:	f8 01       	movw	r30, r16
 a68:	a0 80       	ld	r10, Z
 a6a:	b1 80       	ldd	r11, Z+1	; 0x01
 a6c:	36 fe       	sbrs	r3, 6
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x174>
 a70:	69 2d       	mov	r22, r9
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x178>
 a76:	6f ef       	ldi	r22, 0xFF	; 255
 a78:	7f ef       	ldi	r23, 0xFF	; 255
 a7a:	c5 01       	movw	r24, r10
 a7c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <strnlen_P>
 a80:	4c 01       	movw	r8, r24
 a82:	f3 2d       	mov	r31, r3
 a84:	f0 68       	ori	r31, 0x80	; 128
 a86:	3f 2e       	mov	r3, r31
 a88:	82 01       	movw	r16, r4
 a8a:	33 fc       	sbrc	r3, 3
 a8c:	1b c0       	rjmp	.+54     	; 0xac4 <vfprintf+0x1c2>
 a8e:	82 2d       	mov	r24, r2
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	88 16       	cp	r8, r24
 a94:	99 06       	cpc	r9, r25
 a96:	b0 f4       	brcc	.+44     	; 0xac4 <vfprintf+0x1c2>
 a98:	b6 01       	movw	r22, r12
 a9a:	80 e2       	ldi	r24, 0x20	; 32
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 aa2:	2a 94       	dec	r2
 aa4:	f4 cf       	rjmp	.-24     	; 0xa8e <vfprintf+0x18c>
 aa6:	f5 01       	movw	r30, r10
 aa8:	37 fc       	sbrc	r3, 7
 aaa:	85 91       	lpm	r24, Z+
 aac:	37 fe       	sbrs	r3, 7
 aae:	81 91       	ld	r24, Z+
 ab0:	5f 01       	movw	r10, r30
 ab2:	b6 01       	movw	r22, r12
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 aba:	21 10       	cpse	r2, r1
 abc:	2a 94       	dec	r2
 abe:	21 e0       	ldi	r18, 0x01	; 1
 ac0:	82 1a       	sub	r8, r18
 ac2:	91 08       	sbc	r9, r1
 ac4:	81 14       	cp	r8, r1
 ac6:	91 04       	cpc	r9, r1
 ac8:	71 f7       	brne	.-36     	; 0xaa6 <vfprintf+0x1a4>
 aca:	e8 c0       	rjmp	.+464    	; 0xc9c <vfprintf+0x39a>
 acc:	84 36       	cpi	r24, 0x64	; 100
 ace:	11 f0       	breq	.+4      	; 0xad4 <vfprintf+0x1d2>
 ad0:	89 36       	cpi	r24, 0x69	; 105
 ad2:	41 f5       	brne	.+80     	; 0xb24 <vfprintf+0x222>
 ad4:	f8 01       	movw	r30, r16
 ad6:	37 fe       	sbrs	r3, 7
 ad8:	07 c0       	rjmp	.+14     	; 0xae8 <vfprintf+0x1e6>
 ada:	60 81       	ld	r22, Z
 adc:	71 81       	ldd	r23, Z+1	; 0x01
 ade:	82 81       	ldd	r24, Z+2	; 0x02
 ae0:	93 81       	ldd	r25, Z+3	; 0x03
 ae2:	0c 5f       	subi	r16, 0xFC	; 252
 ae4:	1f 4f       	sbci	r17, 0xFF	; 255
 ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <vfprintf+0x1f6>
 ae8:	60 81       	ld	r22, Z
 aea:	71 81       	ldd	r23, Z+1	; 0x01
 aec:	07 2e       	mov	r0, r23
 aee:	00 0c       	add	r0, r0
 af0:	88 0b       	sbc	r24, r24
 af2:	99 0b       	sbc	r25, r25
 af4:	0e 5f       	subi	r16, 0xFE	; 254
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	f3 2d       	mov	r31, r3
 afa:	ff 76       	andi	r31, 0x6F	; 111
 afc:	3f 2e       	mov	r3, r31
 afe:	97 ff       	sbrs	r25, 7
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <vfprintf+0x212>
 b02:	90 95       	com	r25
 b04:	80 95       	com	r24
 b06:	70 95       	com	r23
 b08:	61 95       	neg	r22
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	8f 4f       	sbci	r24, 0xFF	; 255
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	f0 68       	ori	r31, 0x80	; 128
 b12:	3f 2e       	mov	r3, r31
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	30 e0       	ldi	r19, 0x00	; 0
 b18:	a3 01       	movw	r20, r6
 b1a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__ultoa_invert>
 b1e:	88 2e       	mov	r8, r24
 b20:	86 18       	sub	r8, r6
 b22:	45 c0       	rjmp	.+138    	; 0xbae <vfprintf+0x2ac>
 b24:	85 37       	cpi	r24, 0x75	; 117
 b26:	31 f4       	brne	.+12     	; 0xb34 <vfprintf+0x232>
 b28:	23 2d       	mov	r18, r3
 b2a:	2f 7e       	andi	r18, 0xEF	; 239
 b2c:	b2 2e       	mov	r11, r18
 b2e:	2a e0       	ldi	r18, 0x0A	; 10
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	25 c0       	rjmp	.+74     	; 0xb7e <vfprintf+0x27c>
 b34:	93 2d       	mov	r25, r3
 b36:	99 7f       	andi	r25, 0xF9	; 249
 b38:	b9 2e       	mov	r11, r25
 b3a:	8f 36       	cpi	r24, 0x6F	; 111
 b3c:	c1 f0       	breq	.+48     	; 0xb6e <vfprintf+0x26c>
 b3e:	18 f4       	brcc	.+6      	; 0xb46 <vfprintf+0x244>
 b40:	88 35       	cpi	r24, 0x58	; 88
 b42:	79 f0       	breq	.+30     	; 0xb62 <vfprintf+0x260>
 b44:	b5 c0       	rjmp	.+362    	; 0xcb0 <vfprintf+0x3ae>
 b46:	80 37       	cpi	r24, 0x70	; 112
 b48:	19 f0       	breq	.+6      	; 0xb50 <vfprintf+0x24e>
 b4a:	88 37       	cpi	r24, 0x78	; 120
 b4c:	21 f0       	breq	.+8      	; 0xb56 <vfprintf+0x254>
 b4e:	b0 c0       	rjmp	.+352    	; 0xcb0 <vfprintf+0x3ae>
 b50:	e9 2f       	mov	r30, r25
 b52:	e0 61       	ori	r30, 0x10	; 16
 b54:	be 2e       	mov	r11, r30
 b56:	b4 fe       	sbrs	r11, 4
 b58:	0d c0       	rjmp	.+26     	; 0xb74 <vfprintf+0x272>
 b5a:	fb 2d       	mov	r31, r11
 b5c:	f4 60       	ori	r31, 0x04	; 4
 b5e:	bf 2e       	mov	r11, r31
 b60:	09 c0       	rjmp	.+18     	; 0xb74 <vfprintf+0x272>
 b62:	34 fe       	sbrs	r3, 4
 b64:	0a c0       	rjmp	.+20     	; 0xb7a <vfprintf+0x278>
 b66:	29 2f       	mov	r18, r25
 b68:	26 60       	ori	r18, 0x06	; 6
 b6a:	b2 2e       	mov	r11, r18
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <vfprintf+0x278>
 b6e:	28 e0       	ldi	r18, 0x08	; 8
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	05 c0       	rjmp	.+10     	; 0xb7e <vfprintf+0x27c>
 b74:	20 e1       	ldi	r18, 0x10	; 16
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	02 c0       	rjmp	.+4      	; 0xb7e <vfprintf+0x27c>
 b7a:	20 e1       	ldi	r18, 0x10	; 16
 b7c:	32 e0       	ldi	r19, 0x02	; 2
 b7e:	f8 01       	movw	r30, r16
 b80:	b7 fe       	sbrs	r11, 7
 b82:	07 c0       	rjmp	.+14     	; 0xb92 <vfprintf+0x290>
 b84:	60 81       	ld	r22, Z
 b86:	71 81       	ldd	r23, Z+1	; 0x01
 b88:	82 81       	ldd	r24, Z+2	; 0x02
 b8a:	93 81       	ldd	r25, Z+3	; 0x03
 b8c:	0c 5f       	subi	r16, 0xFC	; 252
 b8e:	1f 4f       	sbci	r17, 0xFF	; 255
 b90:	06 c0       	rjmp	.+12     	; 0xb9e <vfprintf+0x29c>
 b92:	60 81       	ld	r22, Z
 b94:	71 81       	ldd	r23, Z+1	; 0x01
 b96:	80 e0       	ldi	r24, 0x00	; 0
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 5f       	subi	r16, 0xFE	; 254
 b9c:	1f 4f       	sbci	r17, 0xFF	; 255
 b9e:	a3 01       	movw	r20, r6
 ba0:	0e 94 b4 06 	call	0xd68	; 0xd68 <__ultoa_invert>
 ba4:	88 2e       	mov	r8, r24
 ba6:	86 18       	sub	r8, r6
 ba8:	fb 2d       	mov	r31, r11
 baa:	ff 77       	andi	r31, 0x7F	; 127
 bac:	3f 2e       	mov	r3, r31
 bae:	36 fe       	sbrs	r3, 6
 bb0:	0d c0       	rjmp	.+26     	; 0xbcc <vfprintf+0x2ca>
 bb2:	23 2d       	mov	r18, r3
 bb4:	2e 7f       	andi	r18, 0xFE	; 254
 bb6:	a2 2e       	mov	r10, r18
 bb8:	89 14       	cp	r8, r9
 bba:	58 f4       	brcc	.+22     	; 0xbd2 <vfprintf+0x2d0>
 bbc:	34 fe       	sbrs	r3, 4
 bbe:	0b c0       	rjmp	.+22     	; 0xbd6 <vfprintf+0x2d4>
 bc0:	32 fc       	sbrc	r3, 2
 bc2:	09 c0       	rjmp	.+18     	; 0xbd6 <vfprintf+0x2d4>
 bc4:	83 2d       	mov	r24, r3
 bc6:	8e 7e       	andi	r24, 0xEE	; 238
 bc8:	a8 2e       	mov	r10, r24
 bca:	05 c0       	rjmp	.+10     	; 0xbd6 <vfprintf+0x2d4>
 bcc:	b8 2c       	mov	r11, r8
 bce:	a3 2c       	mov	r10, r3
 bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <vfprintf+0x2d6>
 bd2:	b8 2c       	mov	r11, r8
 bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <vfprintf+0x2d6>
 bd6:	b9 2c       	mov	r11, r9
 bd8:	a4 fe       	sbrs	r10, 4
 bda:	0f c0       	rjmp	.+30     	; 0xbfa <vfprintf+0x2f8>
 bdc:	fe 01       	movw	r30, r28
 bde:	e8 0d       	add	r30, r8
 be0:	f1 1d       	adc	r31, r1
 be2:	80 81       	ld	r24, Z
 be4:	80 33       	cpi	r24, 0x30	; 48
 be6:	21 f4       	brne	.+8      	; 0xbf0 <vfprintf+0x2ee>
 be8:	9a 2d       	mov	r25, r10
 bea:	99 7e       	andi	r25, 0xE9	; 233
 bec:	a9 2e       	mov	r10, r25
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x300>
 bf0:	a2 fe       	sbrs	r10, 2
 bf2:	06 c0       	rjmp	.+12     	; 0xc00 <vfprintf+0x2fe>
 bf4:	b3 94       	inc	r11
 bf6:	b3 94       	inc	r11
 bf8:	04 c0       	rjmp	.+8      	; 0xc02 <vfprintf+0x300>
 bfa:	8a 2d       	mov	r24, r10
 bfc:	86 78       	andi	r24, 0x86	; 134
 bfe:	09 f0       	breq	.+2      	; 0xc02 <vfprintf+0x300>
 c00:	b3 94       	inc	r11
 c02:	a3 fc       	sbrc	r10, 3
 c04:	11 c0       	rjmp	.+34     	; 0xc28 <vfprintf+0x326>
 c06:	a0 fe       	sbrs	r10, 0
 c08:	06 c0       	rjmp	.+12     	; 0xc16 <vfprintf+0x314>
 c0a:	b2 14       	cp	r11, r2
 c0c:	88 f4       	brcc	.+34     	; 0xc30 <vfprintf+0x32e>
 c0e:	28 0c       	add	r2, r8
 c10:	92 2c       	mov	r9, r2
 c12:	9b 18       	sub	r9, r11
 c14:	0e c0       	rjmp	.+28     	; 0xc32 <vfprintf+0x330>
 c16:	b2 14       	cp	r11, r2
 c18:	60 f4       	brcc	.+24     	; 0xc32 <vfprintf+0x330>
 c1a:	b6 01       	movw	r22, r12
 c1c:	80 e2       	ldi	r24, 0x20	; 32
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 c24:	b3 94       	inc	r11
 c26:	f7 cf       	rjmp	.-18     	; 0xc16 <vfprintf+0x314>
 c28:	b2 14       	cp	r11, r2
 c2a:	18 f4       	brcc	.+6      	; 0xc32 <vfprintf+0x330>
 c2c:	2b 18       	sub	r2, r11
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <vfprintf+0x332>
 c30:	98 2c       	mov	r9, r8
 c32:	21 2c       	mov	r2, r1
 c34:	a4 fe       	sbrs	r10, 4
 c36:	10 c0       	rjmp	.+32     	; 0xc58 <vfprintf+0x356>
 c38:	b6 01       	movw	r22, r12
 c3a:	80 e3       	ldi	r24, 0x30	; 48
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 c42:	a2 fe       	sbrs	r10, 2
 c44:	17 c0       	rjmp	.+46     	; 0xc74 <vfprintf+0x372>
 c46:	a1 fc       	sbrc	r10, 1
 c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x34e>
 c4a:	88 e7       	ldi	r24, 0x78	; 120
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x352>
 c50:	88 e5       	ldi	r24, 0x58	; 88
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	b6 01       	movw	r22, r12
 c56:	0c c0       	rjmp	.+24     	; 0xc70 <vfprintf+0x36e>
 c58:	8a 2d       	mov	r24, r10
 c5a:	86 78       	andi	r24, 0x86	; 134
 c5c:	59 f0       	breq	.+22     	; 0xc74 <vfprintf+0x372>
 c5e:	a1 fe       	sbrs	r10, 1
 c60:	02 c0       	rjmp	.+4      	; 0xc66 <vfprintf+0x364>
 c62:	8b e2       	ldi	r24, 0x2B	; 43
 c64:	01 c0       	rjmp	.+2      	; 0xc68 <vfprintf+0x366>
 c66:	80 e2       	ldi	r24, 0x20	; 32
 c68:	a7 fc       	sbrc	r10, 7
 c6a:	8d e2       	ldi	r24, 0x2D	; 45
 c6c:	b6 01       	movw	r22, r12
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 c74:	89 14       	cp	r8, r9
 c76:	38 f4       	brcc	.+14     	; 0xc86 <vfprintf+0x384>
 c78:	b6 01       	movw	r22, r12
 c7a:	80 e3       	ldi	r24, 0x30	; 48
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 c82:	9a 94       	dec	r9
 c84:	f7 cf       	rjmp	.-18     	; 0xc74 <vfprintf+0x372>
 c86:	8a 94       	dec	r8
 c88:	f3 01       	movw	r30, r6
 c8a:	e8 0d       	add	r30, r8
 c8c:	f1 1d       	adc	r31, r1
 c8e:	80 81       	ld	r24, Z
 c90:	b6 01       	movw	r22, r12
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 c98:	81 10       	cpse	r8, r1
 c9a:	f5 cf       	rjmp	.-22     	; 0xc86 <vfprintf+0x384>
 c9c:	22 20       	and	r2, r2
 c9e:	09 f4       	brne	.+2      	; 0xca2 <vfprintf+0x3a0>
 ca0:	42 ce       	rjmp	.-892    	; 0x926 <vfprintf+0x24>
 ca2:	b6 01       	movw	r22, r12
 ca4:	80 e2       	ldi	r24, 0x20	; 32
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <fputc>
 cac:	2a 94       	dec	r2
 cae:	f6 cf       	rjmp	.-20     	; 0xc9c <vfprintf+0x39a>
 cb0:	f6 01       	movw	r30, r12
 cb2:	86 81       	ldd	r24, Z+6	; 0x06
 cb4:	97 81       	ldd	r25, Z+7	; 0x07
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x3ba>
 cb8:	8f ef       	ldi	r24, 0xFF	; 255
 cba:	9f ef       	ldi	r25, 0xFF	; 255
 cbc:	2b 96       	adiw	r28, 0x0b	; 11
 cbe:	e2 e1       	ldi	r30, 0x12	; 18
 cc0:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__epilogue_restores__>

00000cc4 <strnlen_P>:
 cc4:	fc 01       	movw	r30, r24
 cc6:	05 90       	lpm	r0, Z+
 cc8:	61 50       	subi	r22, 0x01	; 1
 cca:	70 40       	sbci	r23, 0x00	; 0
 ccc:	01 10       	cpse	r0, r1
 cce:	d8 f7       	brcc	.-10     	; 0xcc6 <strnlen_P+0x2>
 cd0:	80 95       	com	r24
 cd2:	90 95       	com	r25
 cd4:	8e 0f       	add	r24, r30
 cd6:	9f 1f       	adc	r25, r31
 cd8:	08 95       	ret

00000cda <strnlen>:
 cda:	fc 01       	movw	r30, r24
 cdc:	61 50       	subi	r22, 0x01	; 1
 cde:	70 40       	sbci	r23, 0x00	; 0
 ce0:	01 90       	ld	r0, Z+
 ce2:	01 10       	cpse	r0, r1
 ce4:	d8 f7       	brcc	.-10     	; 0xcdc <strnlen+0x2>
 ce6:	80 95       	com	r24
 ce8:	90 95       	com	r25
 cea:	8e 0f       	add	r24, r30
 cec:	9f 1f       	adc	r25, r31
 cee:	08 95       	ret

00000cf0 <fputc>:
 cf0:	0f 93       	push	r16
 cf2:	1f 93       	push	r17
 cf4:	cf 93       	push	r28
 cf6:	df 93       	push	r29
 cf8:	fb 01       	movw	r30, r22
 cfa:	23 81       	ldd	r18, Z+3	; 0x03
 cfc:	21 fd       	sbrc	r18, 1
 cfe:	03 c0       	rjmp	.+6      	; 0xd06 <fputc+0x16>
 d00:	8f ef       	ldi	r24, 0xFF	; 255
 d02:	9f ef       	ldi	r25, 0xFF	; 255
 d04:	2c c0       	rjmp	.+88     	; 0xd5e <fputc+0x6e>
 d06:	22 ff       	sbrs	r18, 2
 d08:	16 c0       	rjmp	.+44     	; 0xd36 <fputc+0x46>
 d0a:	46 81       	ldd	r20, Z+6	; 0x06
 d0c:	57 81       	ldd	r21, Z+7	; 0x07
 d0e:	24 81       	ldd	r18, Z+4	; 0x04
 d10:	35 81       	ldd	r19, Z+5	; 0x05
 d12:	42 17       	cp	r20, r18
 d14:	53 07       	cpc	r21, r19
 d16:	44 f4       	brge	.+16     	; 0xd28 <fputc+0x38>
 d18:	a0 81       	ld	r26, Z
 d1a:	b1 81       	ldd	r27, Z+1	; 0x01
 d1c:	9d 01       	movw	r18, r26
 d1e:	2f 5f       	subi	r18, 0xFF	; 255
 d20:	3f 4f       	sbci	r19, 0xFF	; 255
 d22:	31 83       	std	Z+1, r19	; 0x01
 d24:	20 83       	st	Z, r18
 d26:	8c 93       	st	X, r24
 d28:	26 81       	ldd	r18, Z+6	; 0x06
 d2a:	37 81       	ldd	r19, Z+7	; 0x07
 d2c:	2f 5f       	subi	r18, 0xFF	; 255
 d2e:	3f 4f       	sbci	r19, 0xFF	; 255
 d30:	37 83       	std	Z+7, r19	; 0x07
 d32:	26 83       	std	Z+6, r18	; 0x06
 d34:	14 c0       	rjmp	.+40     	; 0xd5e <fputc+0x6e>
 d36:	8b 01       	movw	r16, r22
 d38:	ec 01       	movw	r28, r24
 d3a:	fb 01       	movw	r30, r22
 d3c:	00 84       	ldd	r0, Z+8	; 0x08
 d3e:	f1 85       	ldd	r31, Z+9	; 0x09
 d40:	e0 2d       	mov	r30, r0
 d42:	09 95       	icall
 d44:	89 2b       	or	r24, r25
 d46:	e1 f6       	brne	.-72     	; 0xd00 <fputc+0x10>
 d48:	d8 01       	movw	r26, r16
 d4a:	16 96       	adiw	r26, 0x06	; 6
 d4c:	8d 91       	ld	r24, X+
 d4e:	9c 91       	ld	r25, X
 d50:	17 97       	sbiw	r26, 0x07	; 7
 d52:	01 96       	adiw	r24, 0x01	; 1
 d54:	17 96       	adiw	r26, 0x07	; 7
 d56:	9c 93       	st	X, r25
 d58:	8e 93       	st	-X, r24
 d5a:	16 97       	sbiw	r26, 0x06	; 6
 d5c:	ce 01       	movw	r24, r28
 d5e:	df 91       	pop	r29
 d60:	cf 91       	pop	r28
 d62:	1f 91       	pop	r17
 d64:	0f 91       	pop	r16
 d66:	08 95       	ret

00000d68 <__ultoa_invert>:
 d68:	fa 01       	movw	r30, r20
 d6a:	aa 27       	eor	r26, r26
 d6c:	28 30       	cpi	r18, 0x08	; 8
 d6e:	51 f1       	breq	.+84     	; 0xdc4 <__ultoa_invert+0x5c>
 d70:	20 31       	cpi	r18, 0x10	; 16
 d72:	81 f1       	breq	.+96     	; 0xdd4 <__ultoa_invert+0x6c>
 d74:	e8 94       	clt
 d76:	6f 93       	push	r22
 d78:	6e 7f       	andi	r22, 0xFE	; 254
 d7a:	6e 5f       	subi	r22, 0xFE	; 254
 d7c:	7f 4f       	sbci	r23, 0xFF	; 255
 d7e:	8f 4f       	sbci	r24, 0xFF	; 255
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	af 4f       	sbci	r26, 0xFF	; 255
 d84:	b1 e0       	ldi	r27, 0x01	; 1
 d86:	3e d0       	rcall	.+124    	; 0xe04 <__ultoa_invert+0x9c>
 d88:	b4 e0       	ldi	r27, 0x04	; 4
 d8a:	3c d0       	rcall	.+120    	; 0xe04 <__ultoa_invert+0x9c>
 d8c:	67 0f       	add	r22, r23
 d8e:	78 1f       	adc	r23, r24
 d90:	89 1f       	adc	r24, r25
 d92:	9a 1f       	adc	r25, r26
 d94:	a1 1d       	adc	r26, r1
 d96:	68 0f       	add	r22, r24
 d98:	79 1f       	adc	r23, r25
 d9a:	8a 1f       	adc	r24, r26
 d9c:	91 1d       	adc	r25, r1
 d9e:	a1 1d       	adc	r26, r1
 da0:	6a 0f       	add	r22, r26
 da2:	71 1d       	adc	r23, r1
 da4:	81 1d       	adc	r24, r1
 da6:	91 1d       	adc	r25, r1
 da8:	a1 1d       	adc	r26, r1
 daa:	20 d0       	rcall	.+64     	; 0xdec <__ultoa_invert+0x84>
 dac:	09 f4       	brne	.+2      	; 0xdb0 <__ultoa_invert+0x48>
 dae:	68 94       	set
 db0:	3f 91       	pop	r19
 db2:	2a e0       	ldi	r18, 0x0A	; 10
 db4:	26 9f       	mul	r18, r22
 db6:	11 24       	eor	r1, r1
 db8:	30 19       	sub	r19, r0
 dba:	30 5d       	subi	r19, 0xD0	; 208
 dbc:	31 93       	st	Z+, r19
 dbe:	de f6       	brtc	.-74     	; 0xd76 <__ultoa_invert+0xe>
 dc0:	cf 01       	movw	r24, r30
 dc2:	08 95       	ret
 dc4:	46 2f       	mov	r20, r22
 dc6:	47 70       	andi	r20, 0x07	; 7
 dc8:	40 5d       	subi	r20, 0xD0	; 208
 dca:	41 93       	st	Z+, r20
 dcc:	b3 e0       	ldi	r27, 0x03	; 3
 dce:	0f d0       	rcall	.+30     	; 0xdee <__ultoa_invert+0x86>
 dd0:	c9 f7       	brne	.-14     	; 0xdc4 <__ultoa_invert+0x5c>
 dd2:	f6 cf       	rjmp	.-20     	; 0xdc0 <__ultoa_invert+0x58>
 dd4:	46 2f       	mov	r20, r22
 dd6:	4f 70       	andi	r20, 0x0F	; 15
 dd8:	40 5d       	subi	r20, 0xD0	; 208
 dda:	4a 33       	cpi	r20, 0x3A	; 58
 ddc:	18 f0       	brcs	.+6      	; 0xde4 <__ultoa_invert+0x7c>
 dde:	49 5d       	subi	r20, 0xD9	; 217
 de0:	31 fd       	sbrc	r19, 1
 de2:	40 52       	subi	r20, 0x20	; 32
 de4:	41 93       	st	Z+, r20
 de6:	02 d0       	rcall	.+4      	; 0xdec <__ultoa_invert+0x84>
 de8:	a9 f7       	brne	.-22     	; 0xdd4 <__ultoa_invert+0x6c>
 dea:	ea cf       	rjmp	.-44     	; 0xdc0 <__ultoa_invert+0x58>
 dec:	b4 e0       	ldi	r27, 0x04	; 4
 dee:	a6 95       	lsr	r26
 df0:	97 95       	ror	r25
 df2:	87 95       	ror	r24
 df4:	77 95       	ror	r23
 df6:	67 95       	ror	r22
 df8:	ba 95       	dec	r27
 dfa:	c9 f7       	brne	.-14     	; 0xdee <__ultoa_invert+0x86>
 dfc:	00 97       	sbiw	r24, 0x00	; 0
 dfe:	61 05       	cpc	r22, r1
 e00:	71 05       	cpc	r23, r1
 e02:	08 95       	ret
 e04:	9b 01       	movw	r18, r22
 e06:	ac 01       	movw	r20, r24
 e08:	0a 2e       	mov	r0, r26
 e0a:	06 94       	lsr	r0
 e0c:	57 95       	ror	r21
 e0e:	47 95       	ror	r20
 e10:	37 95       	ror	r19
 e12:	27 95       	ror	r18
 e14:	ba 95       	dec	r27
 e16:	c9 f7       	brne	.-14     	; 0xe0a <__ultoa_invert+0xa2>
 e18:	62 0f       	add	r22, r18
 e1a:	73 1f       	adc	r23, r19
 e1c:	84 1f       	adc	r24, r20
 e1e:	95 1f       	adc	r25, r21
 e20:	a0 1d       	adc	r26, r0
 e22:	08 95       	ret

00000e24 <__prologue_saves__>:
 e24:	2f 92       	push	r2
 e26:	3f 92       	push	r3
 e28:	4f 92       	push	r4
 e2a:	5f 92       	push	r5
 e2c:	6f 92       	push	r6
 e2e:	7f 92       	push	r7
 e30:	8f 92       	push	r8
 e32:	9f 92       	push	r9
 e34:	af 92       	push	r10
 e36:	bf 92       	push	r11
 e38:	cf 92       	push	r12
 e3a:	df 92       	push	r13
 e3c:	ef 92       	push	r14
 e3e:	ff 92       	push	r15
 e40:	0f 93       	push	r16
 e42:	1f 93       	push	r17
 e44:	cf 93       	push	r28
 e46:	df 93       	push	r29
 e48:	cd b7       	in	r28, 0x3d	; 61
 e4a:	de b7       	in	r29, 0x3e	; 62
 e4c:	ca 1b       	sub	r28, r26
 e4e:	db 0b       	sbc	r29, r27
 e50:	0f b6       	in	r0, 0x3f	; 63
 e52:	f8 94       	cli
 e54:	de bf       	out	0x3e, r29	; 62
 e56:	0f be       	out	0x3f, r0	; 63
 e58:	cd bf       	out	0x3d, r28	; 61
 e5a:	09 94       	ijmp

00000e5c <__epilogue_restores__>:
 e5c:	2a 88       	ldd	r2, Y+18	; 0x12
 e5e:	39 88       	ldd	r3, Y+17	; 0x11
 e60:	48 88       	ldd	r4, Y+16	; 0x10
 e62:	5f 84       	ldd	r5, Y+15	; 0x0f
 e64:	6e 84       	ldd	r6, Y+14	; 0x0e
 e66:	7d 84       	ldd	r7, Y+13	; 0x0d
 e68:	8c 84       	ldd	r8, Y+12	; 0x0c
 e6a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e6c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e6e:	b9 84       	ldd	r11, Y+9	; 0x09
 e70:	c8 84       	ldd	r12, Y+8	; 0x08
 e72:	df 80       	ldd	r13, Y+7	; 0x07
 e74:	ee 80       	ldd	r14, Y+6	; 0x06
 e76:	fd 80       	ldd	r15, Y+5	; 0x05
 e78:	0c 81       	ldd	r16, Y+4	; 0x04
 e7a:	1b 81       	ldd	r17, Y+3	; 0x03
 e7c:	aa 81       	ldd	r26, Y+2	; 0x02
 e7e:	b9 81       	ldd	r27, Y+1	; 0x01
 e80:	ce 0f       	add	r28, r30
 e82:	d1 1d       	adc	r29, r1
 e84:	0f b6       	in	r0, 0x3f	; 63
 e86:	f8 94       	cli
 e88:	de bf       	out	0x3e, r29	; 62
 e8a:	0f be       	out	0x3f, r0	; 63
 e8c:	cd bf       	out	0x3d, r28	; 61
 e8e:	ed 01       	movw	r28, r26
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>
